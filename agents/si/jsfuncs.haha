
#define DEBUG_JSFUNCS 0
#define dlevel 6

#include "si.h"
#include "jsapi.h"
#include "jsobj.h"
#include "jsstr.h"
#include "jsjson.h"

static JSBool si_getprop(JSContext *cx, JSObject *obj, jsval id, jsval *rval);
static JSBool si_setprop(JSContext *cx, JSObject *obj, jsval id, jsval *rval);

static JSClass si_data_class = {
	"si_data",		/* Name */
	JSCLASS_GLOBAL_FLAGS | JSCLASS_HAS_PRIVATE,	/* Flags */
	JS_PropertyStub,	/* addProperty */
	JS_PropertyStub,	/* delProperty */
	si_getprop,		/* getProperty */
	si_setprop,		/* setProperty */
	JS_EnumerateStub,	/* enumerate */
	JS_ResolveStub,		/* resolve */
	JS_ConvertStub,		/* convert */
	JS_FinalizeStub,	/* finalize */
	JSCLASS_NO_OPTIONAL_MEMBERS
};

JSObject *JSSIData(JSContext *cx, si_session_t *s) {
	JSAliasSpec si_data_aliases[] = {
		{ "battery_soc", "battery_level" },
		{ "ac1_voltage", "output_voltage" },
		{ "ac1_frequency", "output_frequency" },
		{ "ac1_current", "output_current" },
		{ "ac1_power", "output_power" },
		{ "ac2_voltage", "input_voltage" },
		{ "ac2_frequency", "input_frequency" },
		{ "ac2_current", "input_current" },
		{ "ac2_power", "input_power" },
		{ "TotLodPwr", "load_power" },
		{ 0 }
	};
	JSObject *obj;

	if (!s->data_props) {
		s->data_props = config_to_props(s->ap->cp, "si_data", 0);
		dprintf(dlevel,"data->props: %p\n",s->data_props);
		if (!s->data_props) {
			log_error("unable to create si_data props: %s\n", config_get_errmsg(s->ap->cp));
			return 0;
		}
	}

	dprintf(dlevel,"defining %s object\n",si_data_class.name);
	obj = JS_InitClass(cx, JS_GetGlobalObject(cx), 0, &si_data_class, 0, 0, s->data_props, 0, 0, 0);
	if (!obj) {
		JS_ReportError(cx,"unable to initialize %s", si_data_class.name);
		return 0;
	}
	dprintf(dlevel,"defining %s aliases\n",si_data_class.name);
	if (!JS_DefineAliases(cx, obj, si_data_aliases)) {
		JS_ReportError(cx,"unable to define aliases");
		return 0;
	}
	JS_SetPrivate(cx,obj,s);
	dprintf(dlevel,"done!\n");
	return obj;
}

/*************************************************************************/

enum SI_PROPERTY_ID {
	SI_PROPERTY_ID_DATA=1024,
	SI_PROPERTY_ID_CDATA,
	SI_PROPERTY_ID_INFO
};

#if 1
static JSBool si_getprop(JSContext *cx, JSObject *obj, jsval id, jsval *rval) {
	int prop_id;
	si_session_t *s;
	config_property_t *p;

	s = JS_GetPrivate(cx,obj);
	if (!s) {
		JS_ReportError(cx,"private is null!");
		return JS_FALSE;
	}

	dprintf(dlevel,"id type: %s\n", jstypestr(cx,id));
	if(JSVAL_IS_INT(id)) {
		prop_id = JSVAL_TO_INT(id);
		dprintf(dlevel,"prop_id: %d\n", prop_id);
		switch(prop_id) {
		case SI_PROPERTY_ID_DATA:
			*rval = OBJECT_TO_JSVAL(JSSIData(cx,s));
			break;
		case SI_PROPERTY_ID_CDATA:
			if (s->can_connected) si_can_get_data(s);
			*rval = OBJECT_TO_JSVAL(JSSIData(cx,s));
			break;
		case SI_PROPERTY_ID_INFO:
		    {
			json_value_t *v;
			char *j;
			JSString *str;
			jsval rootVal;
			JSONParser *jp;
			jsval reviver = JSVAL_NULL;
			JSBool ok;

			/* Convert from C JSON type to JS JSON type */
			v = si_get_info(s);
			dprintf(dlevel,"v: %p\n", v);
			if (!v) {
				JS_ReportError(cx, "unable to create info\n");
				return JS_FALSE;
			}
			j = json_dumps(v,0);
			if (!j) {
				JS_ReportError(cx, "unable to stringify info\n");
				json_destroy_value(v);
				return JS_FALSE;
			}
			dprintf(dlevel,"j: %p\n", j);
			json_destroy_value(v);
			jp = js_BeginJSONParse(cx, &rootVal);
			dprintf(dlevel,"jp: %p\n", jp);
			if (!jp) {
				JS_ReportError(cx, "unable init JSON parser\n");
				free(j);
				return JS_FALSE;
			}
			str = JS_NewStringCopyZ(cx,j);
        		ok = js_ConsumeJSONText(cx, jp, JS_GetStringChars(str), JS_GetStringLength(str));
			dprintf(dlevel,"ok: %d\n", ok);
			ok = js_FinishJSONParse(cx, jp, reviver);
			dprintf(dlevel,"ok: %d\n", ok);
			free(j);
			*rval = rootVal;
		    }
		    break;
		default:
			p = CONFIG_GETMAP(s->ap->cp,prop_id);
			if (!p) p = config_get_propbyid(s->ap->cp,prop_id);
			if (!p) {
				JS_ReportError(cx, "property %d not found", prop_id);
				return JS_FALSE;
			}
			break;
		}
	} else if (JSVAL_IS_STRING(id)) {
		return config_jsgetprop(cx, obj, id, rval, s->ap->cp, 0);
#if 0
		char *sname, *name;
		JSClass *classp = OBJ_GET_CLASS(cx, obj);

		sname = (char *)classp->name;
		name = (char *)js_GetStringBytes(cx, JSVAL_TO_STRING(id));
		dprintf(0,"sname: %s, name: %s\n", sname, name);
		if (sname && name) p = config_get_property(s->ap->cp, sname, name);
		else p = 0;
		dprintf(0,"p: %p\n", p);
		if (!p) return config_jsgetprop(cx, obj, id, rval, s->ap->cp, 0);
		if (!p) {
			JS_ReportError(cx, "%s.%s: property not found", sname, name);
			return JS_FALSE;
		}
#endif
	} else {
		dprintf(dlevel,"neither int nor string\n");
		*rval = JSVAL_NULL;
		return JS_TRUE;
	}
	dprintf(dlevel,"p: %p\n", p);
	if (*rval == JSVAL_VOID && p && p->dest) {
		dprintf(dlevel,"p: type: %d(%s), name: %s\n", p->type, typestr(p->type), p->name);
		*rval = type_to_jsval(cx,p->type,p->dest,p->len);
	}
	return JS_TRUE;
}
#endif

#if 0
static JSBool si_getprop(JSContext *cx, JSObject *obj, jsval id, jsval *rval) {
	si_session_t *s;
	int prop_id;

	dprintf(dlevel,"getprop called!\n");
	s = JS_GetPrivate(cx,obj);
	if (!s) {
		JS_ReportError(cx,"private is null!");
		return JS_FALSE;
	}
		return config_jsgetprop(cx, obj, id, rval, s->ap->cp, 0);
	dprintf(dlevel,"id type: %s\n", jstypestr(cx,id));
	if(JSVAL_IS_INT(id)) {
#if 0
		prop_id = JSVAL_TO_INT(id);
		dprintf(dlevel,"prop_id: %d\n", prop_id);
		switch(prop_id) {
		case SI_PROPERTY_ID_DATA:
			*rval = OBJECT_TO_JSVAL(JSSIData(cx,s));
			break;
		case SI_PROPERTY_ID_CDATA:
			if (s->can_connected) si_can_get_data(s);
			*rval = OBJECT_TO_JSVAL(JSSIData(cx,s));
			break;
		default:
			return config_jsgetprop(cx, obj, id, rval, s->ap->cp, 0);
			break;
		} 
#endif
		return config_jsgetprop(cx, obj, id, rval, s->ap->cp, 0);
	} else {
		return config_jsgetprop(cx, obj, id, rval, s->ap->cp, 0);
	}
	return JS_TRUE;
}
#endif

static JSBool si_setprop(JSContext *cx, JSObject *obj, jsval id, jsval *rval) {
	si_session_t *s;

	dprintf(dlevel,"setprop called!\n");
	s = JS_GetPrivate(cx,obj);
	if (!s) {
		JS_ReportError(cx,"private is null!");
		return JS_FALSE;
	}
	return config_jssetprop(cx, obj, id, rval, s->ap->cp, 0);
}

static JSClass si_class = {
	"si",			/* Name */
	JSCLASS_GLOBAL_FLAGS | JSCLASS_HAS_PRIVATE,	/* Flags */
	JS_PropertyStub,	/* addProperty */
	JS_PropertyStub,	/* delProperty */
	si_getprop,		/* getProperty */
	si_setprop,		/* setProperty */
	JS_EnumerateStub,	/* enumerate */
	JS_ResolveStub,		/* resolve */
	JS_ConvertStub,		/* convert */
	JS_FinalizeStub,	/* finalize */
	JSCLASS_NO_OPTIONAL_MEMBERS
};

static JSBool si_ctor(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
	si_session_t *s;
	JSObject *newobj,*gobj;

	s = si_driver.new(0,0);

	gobj = JS_GetGlobalObject(cx);
	newobj = JS_InitClass(cx, gobj, gobj, &si_class, 0, 0, 0, 0, 0, 0);
	JS_SetPrivate(cx,newobj,s);
	*rval = OBJECT_TO_JSVAL(newobj);
	return JS_TRUE;
}

JSObject *js_InitSIClass(JSContext *cx, void *priv) {
	si_session_t *s = priv;
	JSObject *obj,*gobj;

	dprintf(dlevel,"s->props: %p, cp: %p\n",s->props,s->ap->cp);
	if (!s->props) {
		s->props = config_to_props(s->ap->cp, "si", 0);
		dprintf(dlevel,"s->props: %p\n",s->props);
		if (!s->props) {
			log_error("unable to create props: %s\n", config_get_errmsg(s->ap->cp));
			return 0;
		}
	}

	dprintf(dlevel,"Defining %s object\n",si_class.name);
	gobj = JS_GetGlobalObject(cx);
	obj = JS_InitClass(cx, gobj, gobj, &si_class, si_ctor, 2, 0, 0, 0, 0);
	if (!obj) {
		JS_ReportError(cx,"unable to initialize Class class");
		return 0;
	}
	JS_SetPrivate(cx,obj,s);
	dprintf(dlevel,"done!\n");
	return obj;
}

JSObject *js_init_si(JSContext *cx, void *priv) {
	JSObject *newobj;

        newobj = js_InitSIClass(cx,(si_session_t *)priv);
	JS_DefineProperty(cx, JS_GetGlobalObject(cx), "si", OBJECT_TO_JSVAL(newobj), 0, 0, 0);
	return newobj;
}

int si_jsinit(si_session_t *s) {
//	JS_EngineAddInitFunc(s->ap->js, "si", js_InitSIClass, s);
	JS_EngineAddInitFunc(s->ap->js, "si", js_init_si, s);
//	JS_EngineAddInitFunc(s->ap->js, "can", js_init_candev, s);
//	JS_EngineAddInitFunc(s->ap->js, "smanet", js_init_smanetdev, s);
	return 0;
}
