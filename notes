
/solarD/BatteryPack/pack_xx/Config/Get|Set|Status
/solarD/BatteryInverter/
/solarD/SolarInverter/
/solarD/ChargeController
/solarD/Director

ALL messages are QOS=1

all topics are at least 5 levels deep
	more levels can be published by the agent but the agent must publish at least 5

level 1: SolarD
level 2: role
level 4: name
level 5: function (data/info/config/control/status)
level 6: action (get/set/add/del/start/stop)
level 7: id

default controller name is "solard"

Example data output topic for a battery role:

	/SolarD/Battery/PowerWall01/Data

SolarD/Battery/all/Config/Get/(client)id={"Name" (or Status or another item)}
each one replies with:
SolarD/Client/(client)id/Config/Settings/(agent)id={(requested info or error)}

ALL agents will respond to all requests with status (integer)
	if status nonzero, errmsg will be returned as well

SolarD/Battery/(name or id)/Config/Get/id={"Status"}
SolarD/Client/id(from req)/Config/Status/name(from req)={"Status"}


/Status = Online or Offline (Agent start = Online, LWT = Offline)

/Info = retained, static agent information, type, role, model, etc (r = required, nr = not required)
	nr, agent_name
	nr, agent description
	nr, agent_version
	nr, agent_author
	nr, device manufacturer(s)
	nr, device model(s)
	r, array of capabilities
		r, configuration (ability to get/set configuration options)
		nr, role-specific capabilities
	r, array of supported configuration identifiers
		each entry should include:
			identifier name
			data type
			scope:
			   bool: done
			   number(int/float):
				range: min,max,step
				select: array of selections
				mask: array of values to be OR'd
			   string:
				dim: min,max lengths
				set: acceptable chars
				select: array of selections
			unit of measure
			unit scaling, if any

		name, data type, scope, unit, format

Data types:
bool : The boolean type (true/false/yes/no)
str : A string
str[N]: A fixed length string
i8 : The 8-bit signed integer type.
byte : The 8-bit signed integer type.
i16 : The 16-bit signed integer type.
short : The 16-bit signed integer type.
i32 : The 32-bit signed integer type.
int : The 32-bit signed integer type.
i64 : The 64-bit signed integer type.
quad : The 64-bit signed integer type.
u8 : The 8-bit unsigned integer type.
ubyte : The 8-bit unsigned integer type.
u16 : The 16-bit unsigned integer type.
ushort : The 16-bit unsigned integer type.
u32 : The 32-bit unsigned integer type.
uint : The 32-bit unsigned integer type.
u64 : The 64-bit unsigned integer type.
uquad : The 64-bit unsigned integer type.
f32 : The 32-bit floating point type.
float : The 32-bit floating point type.
f64 : The 64-bit floating point type.
double : The 64-bit floating point type.
array : A fixed-size array, denoted [T; N], for the element type, T, and the non-negative compile-time constant size, N.
array[T]: Array of type
Array[T,N]: Array of type, Fixed number of elements


bit: binary bitmask, represented as 0/1
bit[N]: binary bitmask, represented as 0/1, fixed number of bits
bit[N,S]: binary bitmask, represented as 0/1, fixed number of bits, starting at bit S
state: on/off boolean

fixed types
ip,ipv4: ipv4 address
ipv6: ipv6 address
phone: phone number
email: email address

data type, scope, 

scopes:
range: min,max,step
selection: value must be one of array of descriptors
selectmulti: value can be bitwise OR of descriptor values (number only)


/Status = not retained, operational status of the agent
	published by agent in response to requests or operational updates

/Config = retained, per-device configuration information, if capable
client sends request to /Config/Get|Set/<identifier>
	client will publish a zero-length message on Get requests
	client will publish a non-zero length message on Set requests
	agent must publish status of Get|Set quest to /Status/<action>-<identifier>
		message format must be a JSON string with the following fields:
			<identifier>,<value if any>,<error code, 0 if success>,<error message, if any>
	agent may publish response to /Config
		agent may not publish updated configuration if requested identifier does not exist or not in range
		agent can return all currently known configuration parameters (not just identifier)
		agent is not required to retain previous configuration entries and need only return the requested identifier

/Data = not retained, operational information (such as cell voltages, power flow, site info) at regular intervals
	(interval could be one of the supported parameters)

